security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    role_hierarchy:
        # ROLE_ADMIN: [ROLE_ADMIN_COMMENT, ROLE_ADMIN_ARTICLE, ROLE_ALLOWED_TO_SWITCH]
        
    encoders:
        App\Entity\User:
            algorithm: 'auto'
            cost:      4

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        login:
            pattern:  ^/api/login
            stateless: true
            json_login:
                check_path:         /api/login_check
                success_handler:    lexik_jwt_authentication.handler.authentication_success
                failure_handler:    lexik_jwt_authentication.handler.authentication_failure

            guard:
                authenticators:
                    - App\Security\JwtTokenAuthenticator

        api:
            pattern:  ^/api
            stateless: true
            anonymous: true
            provider: app_user_provider
            lexik_jwt:
                authorization_header:
                    enabled: true
                    prefix:  Bearer
                query_parameter:
                    enabled: true
                    name:    bearer
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        register:
            pattern:  ^/register
            stateless: true
            anonymous: true
      
        main:
            anonymous: lazy
            provider: app_user_provider

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY }
